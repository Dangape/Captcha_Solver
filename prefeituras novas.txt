Aparecido de Goiânia: https://www.issnetonline.com.br/aparecida/online/NotaDigital/VerificaAutenticidade.aspx

Campo Grande: https://nfse.pmcg.ms.gov.br/NotaFiscal/verificarAutenticidade.php

Blumenau: https://nfse.blumenau.sc.gov.br/contrib/app/nfse/impressao_externa?s=25170558&e=80680093000181&f=1MRQHCTK

Cuiaba: https://cuiaba.notaeletronica.com.br/free/cuiaba/NotaDigital/VerificaAutenticidade.aspx

Belo Horizonte: https://bhissdigital.pbh.gov.br/nfse/pages/consultaNFS-e_cidadao.jsf

Criciúma: https://e-gov.betha.com.br/e-nota/verificar_autenticidade.faces

gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Add some extra padding around the image
    gray = cv2.copyMakeBorder(gray, 8, 8, 8, 8, cv2.BORDER_REPLICATE)

    # threshold the image (convert it to pure black and white)
    thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)[1]

    close = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, np.ones((2, 1), np.uint8))

    dilate = cv2.dilate(close, np.ones((2, 1), np.uint8), iterations=1)

    # find the contours (continuous blobs of pixels) the image
    contours = cv2.findContours(dilate.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Hack for compatibility with different OpenCV versions
    contours = contours[0]

    letter_image_regions = []

    # Now we can loop through each of the four contours and extract the letter
    # inside of each one
    for contour in contours:
        # Get the rectangle that contains the contour
        (x, y, w, h) = cv2.boundingRect(contour)

        # Compare the width and height of the contour to detect letters that
        # are conjoined into one chunk
        if w / h > 1.25:
            # This contour is too wide to be a single letter!
            # Split it in half into two letter regions!
            half_width = int(w / 2)
            letter_image_regions.append((x, y, half_width, h))
            letter_image_regions.append((x + half_width, y, half_width, h))
        else:
            # This is a normal letter by itself
            letter_image_regions.append((x, y, w, h))
